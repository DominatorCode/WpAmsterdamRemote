// Generated by CoffeeScript 2.2.1
(function() {
  // Reference jQuery
  var $;

  $ = jQuery;

  $.awesomeCropper = function(inputAttachTo, options) {
    var $applyButton,makeid,dataURLtoBlob,attachementid,result, $buttonselect,$editimages,$remove,editimagesave, $cancelButton, $container, $cropSandbox, $fileSelect, $imagesContainer, $inputAttachTo, $progressBar, $resultIm, $sourceIm, $urlSelect, $urlSelectButton, a, cleanImages, div, drawImage, fileAllowed, handleDragOver, handleDropFileSelect, handleFileSelect, image, input, log, readFile, removeAreaSelect, removeLoading, saveCrop, setAreaSelect, setImages, editImages, setLoading, setOriginalSize, settings;
    // Default settings
    settings = {
      width: 600,
      height: 300,
      debug: false
    };
    // Merge default settings with options.
    settings = $.extend(settings, options);
    // Simple logger.
    log = function() {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(arguments) : void 0;
      }
    };
    // Input
    $inputAttachTo = $(inputAttachTo);
    input = function(type) {
      return $(`<input type = "${type}" />`);
    };
    button = function(text) {
      return $(`<button/>`);
    };
    div = function() {
      return $("<div/>");
    };
    a = function(text) {
      return $(`<a href="#">${text}</a>`);
    };
    image = function() {
      return $('<img/>');
    };
    li = function() {
      return $('<li/>');
    };
    // Main box
  
    var listIndex = $( '#gallery-metabox-list li' ).index( $( '#gallery-metabox-list li:last' ) )+1;
    var index = (listIndex + 1);
    $buttonselect = button().attr('type','button').addClass('gallery-add button button-primary upfile1').html('Add Images');
    $container = div().insertAfter($inputAttachTo).addClass('awesome-cropper');
    $cropSandbox = $('<canvas></canvas>');
    $cropSandbox.attr({
      width: settings.width,
      height: settings.height
    });

    $container.append($cropSandbox);
    // File chooser
    $fileSelect = input('file').css("display","none").addClass('file1').attr("accept","image/*");
    $container.append($fileSelect);

    if (settings.proxy_path !== void 0) {
      // URL input
      $urlSelect = input('text');
      $urlSelectButton = input('button');
      $urlSelectButton.val('Upload from url');
      $container.append(div().addClass('form-group').append($urlSelect).append($urlSelectButton));
    }
    // Progress bar
    $progressBar = div().addClass('progress hide').append(div().addClass('progress-bar').attr({
      role: 'progressbar',
      'aria-valuenow': "60",
      'aria-valuemin': "0",
      'aria-valuemax': "100",
      style: "width: 60%;"
    }));
    $container.append($progressBar);
    // Result Image
    $resultIm = image();
    $hiddenid= input('hidden').attr('name', '_igmb_image_gallery_id["'+index+'"]');
    
    // Modal dialog with cropping
    $sourceIm = image();
    $applyButton = a('Apply').addClass('btn yes btn-primary applyButton');
    $cancelButton = a('Cancel').addClass('btn btn-danger cancelButton').attr({
      'data-dismiss': "modal"
    });
    $editimages = a('Edit').addClass('edit-image').attr('title','Edit/Change Image');
    $imagesContainer = div().append(div().addClass('modal-dialog').append(div().addClass('modal-content').append(div().addClass('modal-body').append(div().addClass('col-lg-8 col-md-7 original_image').append($sourceIm)).append(div().addClass('col-lg-3 col-md-4 canvas_wrap').append($cropSandbox)).append(div().addClass('clearfix')), div().addClass('modal-footer').append(div().addClass('btn-group').append($cancelButton).append($applyButton))))).addClass('modal').attr({
      role: 'dialog'
    });
    $container.append($imagesContainer);
    $container.append($buttonselect);
    // Plugin UI functions
    removeAreaSelect = function(image) {
      return image.imgAreaSelect({
        remove: true
      });
    };
    cleanImages = function() {
      var im;
      removeAreaSelect($sourceIm);
      im = $sourceIm;
      $sourceIm = image();
      return im.replaceWith($sourceIm);
    };
    setLoading = function() {
      return $progressBar.removeClass('hide');
    };
    removeLoading = function() {
      $imagesContainer.on('shown.bs.modal', function() {}).on('hidden.bs.modal', function() {
        return cleanImages();
      }).modal();
      return $progressBar.addClass('hide');
    };
    setOriginalSize = function(img) {
      var tempImage;
      tempImage = new Image();
      tempImage.onload = function() {
        img.attr({
          'data-original-width': tempImage.width,
          'data-original-height': tempImage.height
        });
        return setAreaSelect($sourceIm);
      };

      return tempImage.src = img.attr('src');
    };
    setImages = function(uri) {
      $applyButton.attr('data-id','');
      return $sourceIm.attr('src', uri).load(function() {
        removeLoading();
        return setOriginalSize($sourceIm);
      });
    };
    editImages = function(uri,attachementid) {
      return $sourceIm.attr('src', uri).load(function() {
        removeLoading();
        $applyButton.attr({'data-id': attachementid});
        return setOriginalSize($sourceIm);
      });
    };
    drawImage = function(img, x, y, width, height) {
      var context, destHeight, destWidth, destX, destY, oHeight, oWidth, r, sourceHeight, sourceWidth, sourceX, sourceY;
      oWidth = img.attr('data-original-width');
      oHeight = img.attr('data-original-height');
      if (oWidth > oHeight) {
        r = oHeight / img.height();
      } else {
        r = oWidth / img.width();
      }
      sourceX = Math.round(x * r);
      sourceY = Math.round(y * r);
      sourceWidth = Math.round(width * r);
      sourceHeight = Math.round(height * r);
      destX = 0;
      destY = 0;
      destWidth = settings.width;
      destHeight = settings.height;
      context = $cropSandbox.get(0).getContext('2d');
      return context.drawImage(img.get(0), sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    };
    setAreaSelect = function(image) {
      var viewPort, x2, y2;
      viewPort = $(window).height() - 150;
      if ($sourceIm.height() > viewPort) {
        $sourceIm.css({
          height: viewPort + "px"
        });
      }

      log(image.width(), image.height());
      if (image.width() / settings.width >= image.height() / settings.height) {
        y2 = image.height();
        x2 = Math.round(settings.width * (image.height() / settings.height));
      } else {
        x2 = image.width();
        y2 = Math.round(settings.height * (image.width() / settings.width));
      }
      log(x2, y2, image.width(), image.height());
      drawImage($sourceIm, 0, 0, x2 - 1, y2 - 1);

      return image.imgAreaSelect({
        aspectRatio: `${settings.width}:${settings.height}`,
        handles: true,
        x1: 0,
        y1: 0,
        x2: x2,
        y2: y2,
        onSelectEnd: (img, selection) => {
          return drawImage($sourceIm, selection.x1, selection.y1, selection.width - 1, selection.height - 1);
        }
      });
    };
    // Plugin images loading function
    fileAllowed = function(name) {
      var res;
      res = name.match(/\.(jpg|png|gif|jpeg)$/mi);
      if (!res) {
        alert('Only *.jpeg, *.jpg, *.png, *.gif files allowed');
        return false;
      } else {
        return true;
      }
    };
    readFile = function(file) {
      var reader;
      reader = new FileReader();
      setLoading();
      reader.onload = function(e) {

        return setImages(e.target.result);
      };
      return reader.readAsDataURL(file);
    };
    handleDropFileSelect = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
      if (evt.originalEvent.dataTransfer.files[0] !== void 0) {
        if (!fileAllowed(evt.originalEvent.dataTransfer.files[0].name)) {
          return;
        }
        return readFile(evt.originalEvent.dataTransfer.files[0]);
      }
    };
    handleDragOver = function(e) {
      e.originalEvent.dataTransfer.dropEffect = "copy";
      e.stopPropagation();
      return e.preventDefault();
    };
    handleFileSelect = function(evt) {
      if (evt.target.files[0] !== void 0) {
        if (!fileAllowed(evt.target.files[0].name)) {
          return;
        }
        readFile(evt.target.files[0]);
        return evt.target.value = "";
      }
    };
    dataURLtoBlob = function(dataURL){
        var binary = atob(dataURL.split(',')[1])
        var array = []
        var i = 0
        while( i < binary.length){
          array.push (binary.charCodeAt(i));
          i++
        }
       return new Blob([ new Uint8Array(array) ],{ type: 'image/png'})
      };

   makeid = function(string_length) {
      //  var result           = '';
      //  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      //  var charactersLength = characters.length;
      //  for ( var i = 0; i < length; i++ ) {
      //     result += characters.charAt(Math.floor(Math.random() * charactersLength));
      //  }
      // return result;

      let random_string = '';
    let random_ascii;
    let ascii_low = 65;
    let ascii_high = 90
    for(let i = 0; i < string_length; i++) {
        random_ascii = Math.floor((Math.random() * (ascii_high - ascii_low)) + ascii_low);
        random_string += String.fromCharCode(random_ascii)
    }
    return random_string
  }

    editimagesave = function(attachementid) {
      // var d = new Date();
      // var n = d.getTime()
      var filename = makeid(7)+"-editthumb.png";
      result = $cropSandbox.get(0).toDataURL();
      var crop_w=$('.imgareaselect-selection').css("width");
      var crop_h=$('.imgareaselect-selection').css("height");
       var getval = dataURLtoBlob(result);
      var form = new FormData();
      form.append('files',getval,filename);
      form.append('action',"my_cropeimage_edit_url");
      form.append('crop_h',crop_h);
      form.append('crop_w',crop_w);
      form.append('attachementid',attachementid);
      $('#loading-image').show();
      $.ajax({
       url : my_ajax_object.ajax_url,
       type : "post",
       async:true,
       crossDomain:true,
       mimeType:'multipart/form-data',
       contentType: false,
       processData: false,
       data :form,
       success: function(response) {
          if(response) {
            $('#gallery-metabox-list li.current-edit img.image-preview').attr('src',result);
            // listIndex = $( '#gallery-metabox-list li' ).index( $( '#gallery-metabox-list li:last' ) )+1;
            // index = (listIndex + 1);
            // $hiddenid= input('hidden').attr('name', '_igmb_image_gallery_id["'+index+'"]');
            // $hiddenid.attr('value',response);
            // $resultIm.attr('src', result).addClass('image-preview');
            // $editimages = a('Edit').addClass('edit-image').attr('title','Edit/Change Image').data('data-target','modal');
            // $remove = a('Remove').addClass('remove-image').attr('title','Remove Image');
            // $('#gallery-metabox-list li.current-edit').empty().append($resultIm).append($hiddenid).append($editimages).append($remove);
            //$inputAttachTo.val(result);
          }
       },
       complete: function(){
            $('#loading-image').hide();
      }
    });
       // return cleanImages();
    };
    
    saveCrop = function() {
      // var d = new Date();
      // var n = d.getTime();
      result = $cropSandbox.get(0).toDataURL();  
      var crop_w=$('.imgareaselect-selection').css("width");
      var crop_h=$('.imgareaselect-selection').css("height");
      var getval = dataURLtoBlob(result);
      var form = new FormData();
      var filename = makeid(7)+"-thumb.png";
      form.append('files',getval,filename);
      form.append('action',"my_cropeimage_url");
      form.append('crop_w',crop_w);
      form.append('crop_h',crop_h);
      var imagedatanew = { imageData:result };
      $('#loading-image').show();
      $.ajax({
       url : my_ajax_object.ajax_url,
       type : "post",
       async:true,
       crossDomain:true,
       mimeType:'multipart/form-data',
       contentType: false,
       processData: false,
       //dataType : "json",
       data : form,
       success: function(response) {
          if(response) {
            //$originalIm = image();
            $resultIm = image();
            listIndex = $( '#gallery-metabox-list li' ).index( $( '#gallery-metabox-list li:last' ) )+1;
            // if(listIndex==3) {
            //   $('#gallery-metabox-list li:last-child').remove();
            // } 
            index = (listIndex + 1);
            $hiddenid= input('hidden').attr('name', '_igmb_image_gallery_id['+index+']');
            $hiddenid.attr('value',response);
            //console.log(original_image);
            // $originalIm.attr('src', original_image).addClass('image-previe');
            // $originalIm.attr('style', 'display:none');
            $resultIm.attr('src', result).addClass('image-preview');
            $editimages = a('Edit').addClass('edit-image').attr('title','Edit/Change Image').data('data-target','modal');
            $remove = a('Remove').addClass('remove-image').attr('title','Remove Image');
            $( '#gallery-metabox-list' ).append(li().append($resultIm).append($hiddenid).append($editimages).append($remove));
            $inputAttachTo.val(result);
          }
       },
      complete: function(){
            $('#loading-image').hide();
      }
    });
    return cleanImages();
    };
    // Setup the listeners

   $(document).on('click','.edit-image',function(e){
      e.preventDefault();
      $("#gallery-metabox-list li").removeClass("current-edit");  
      $(this).parent().addClass('current-edit');
      var editimageset = $(this).parent().children("img:first").attr('src'); 
      attachementid = $(this).parent().children("input:first").val(); 
         console.log('herreee',attachementid);
      return editImages(editimageset,attachementid);

    });
    $fileSelect.on('change', handleFileSelect);
    $container.on('dragover', handleDragOver);
    $container.on('drop', handleDropFileSelect);
    if (settings.proxy_path !== void 0) {
      $urlSelect.on('dragover', handleDragOver);
      $urlSelect.on('drop', handleDropFileSelect);
      $urlSelectButton.click(function() {
        var url;
        if (!$urlSelect.val().match(/^(https?:\/\/)?/)) {
          return;
        }
        if (!fileAllowed($urlSelect.val())) {
          return;
        }

        setLoading();
        url = settings.proxy_path.replace(/:url/, $urlSelect.val());
        return $.get(url).done(function(data) {
          return setImages(data);
        }).fail(function(jqXNR, textStatus) {
          $progressBar.addClass('hide');
          return alert("Failed to load image");
        });
      });
    }
    $('.cancelButton').on('click', function(e) {
      e.preventDefault();
      return cleanImages();
    });
    $('.applyButton').on('click', function(e) {
      e.preventDefault();
     var attachementid = $(this).attr('data-id');
      if(attachementid){
         editimagesave(attachementid);
      }else{
        saveCrop();
      }  
      return $imagesContainer.modal('hide'); 
    });
  };

   /*
   * Edit crop image
   *
   * Copyright 2013 8xx8, vdv73rus
   *
   * v0.0.2
   */

  
      
  $(window).load(function(){
    $(".upfile1").click(function () {
        $(".file1").trigger('click');
    });
  });

  /*
   * jQuery Awesome Cropper plugin
   *
   * Copyright 2013 8xx8, vdv73rus
   *
   * v0.0.2
   */
  $.fn.extend({
    awesomeCropper: function(options) {
      return this.each(function() {
        // Is there already an imgAreaSelect instance bound to this element?
        if ($(this).data("awesomeCropper")) {
          // Yes there is -- is it supposed to be removed?
          if (options.remove) {
            // Remove the plugin
            $(this).data("awesomeCropper").remove();
            $(this).removeData("awesomeCropper");
          } else {
            // Reset options
            $(this).data("awesomeCropper").setOptions(options);
          }
        } else if (!options.remove) {
          // No exising instance -- create a new one

          $(this).data("awesomeCropper", new $.awesomeCropper(this, options));
        }
        if (options.instance) {
          return $(this).data("awesomeCropper");
        }
        return this;
      });
    }
  });

}).call(this);
